业务漏洞

	业务逻辑漏洞

		业务逻辑漏洞定义
			业务逻辑漏洞是指由于程序逻辑不严谨或逻辑太复杂，导致一些逻辑分支不能正常处理或处理错误

		业务逻辑漏洞特性
			业务逻辑漏洞只出现于业务流程中(模块功能)，也就是说网站的部分都有可能存在逻辑错误漏洞

		业务逻辑漏洞常见分类
			业务逻辑漏洞中用户体系包含如下问题
				密码重置问题
				cookies验证问题
				越权操作问题

		业务逻辑漏洞常见的危害
			任意密码修改
			越权访问
			密码任意找回
			交易支付金额任意修改
	
	简介
		业务逻辑漏洞是应用程序的设计和实现中的缺陷，攻击者可以利用这些缺陷引发意外行为
		这可能使攻击者能够操纵合法功能来实现恶意行为
		这些缺陷通常是由于无法预期可能发生的异常应用程序状态，因此无法安全处理它们所导致的
		逻辑漏洞通常很难发现的，因为通常不会在应用程序的正常使用中暴露它们
		但是，攻击者可以通过开发人员意料之外的方式与应用程序进行交互来攻击利用
		业务逻辑的主要设计意图之一是强制执行设计应用程序或功能时定义的规则和约束
		业务规则规定了在特定场景发生时应用程序应如何反应，包括阻止用户会对业务产生负面影响的行为
		逻辑上的缺陷可以使攻击者绕过这些规则
		例如，他们可能无需购买即可完成交易
		在其他情况下，可能通过将意外的值传递到服务器端逻辑，攻击者有可能诱使应用程序执行不应执行的操作
		基于逻辑的漏洞可能非常多样，并且通常是应用程序及其特定功能所独有的
		识别它们通常需要一定数量的专业知识，例如对业务流程的理解或攻击者在给定上下文中可能具有的目标
		逻辑漏洞很难使用自动漏洞扫描程序进行检测
	
	产生原因
		由于开发团队对用户如何与应用程序交互中错误行为的处理，因此经常会出现业务逻辑漏洞
		这些错误的行为可能导致用户输入验证不足
		例如，如果开发人员规定用户将仅通过Web浏览器传递数据，则应用程序可能完全依赖不安全的客户端来验证输入
		攻击者可以使用拦截代理轻松绕过这些漏洞
		最终，这意味着当攻击者输入超出预期的用户行为时，应用程序将无法采取适当的措施来防止这种情况的发生，因此，也就无法安全地处理这种情况
		逻辑漏洞在过于复杂的系统中尤其常见，即使开发团队本身也无法完全理解
		为了避免逻辑缺陷，开发人员需要从整体上理解应用程序
		这包括了解如何以意想不到的方式组合不同的功能
		使用大型代码库的开发人员可能对应用程序的所有区域如何工作没有深入的了解
		在一个组件上工作的人可能会对另一组件的工作方式做出错误的假设，结果，无意中引入了严重的逻辑缺陷
		如果开发人员未明确记录正在做的任何预期行为，则此类漏洞很容易蔓延到应用程序中
	
	示例

		信任不安全的客户端
			一个基本的逻辑漏洞是，用户仅仅通过提供的web界面与服务端直接交互，虽然客户端会对用户的恶意输入进行验证，但是攻击者可以通过代理拦截来篡改数据，这些数据是在浏览器发送之后，再发送到服务端，即绕过了客户端的检验，使得客户端检验变得无用
		未能处理非预测输入
			业务逻辑的作用之一就是
				将用户输入限制为符合业务规则的值
			例如网上购物商品时，用户通常会指定商品数量，理论上任何整数都可以是有效输入，但是业务逻辑规则不允许用户订购商品数量超过库存数量，也不允许接受负数值的商品数量
			当然，此类逻辑漏洞不仅仅发生在商品购物上，还可能在银行转账等功能上
				---------------------------------------------
				$transferAmount = $_POST['amount'];
				$currentBalance = $user->getBalance();
				if ($transferAmount <= $currentBalance) {
				    // Complete the transfer
				} else {
				    // Block the transfer: insufficient funds
				}
				---------------------------------------------
			若没有验证account参数可能存在负值的情况，攻击者可能会利用它来绕过余额检验，并反向转移资金
			比如向受害者账户转移了-1000$，这可能会使攻击者从受害者那里获取到1000$
			
			数量可设为负值
			
			整数型溢出
				例如c语言中，int型的数值范围是：-2147483647~2147483647
				将价格最高的商品加入购物车，商品数量设置为最大数量99，利用Intruder一直重复加入购物车

			对输入的值处理后未验证
				服务端有时候处理的用户异常的输入后，未对处理后的值做有效验证，导致了逻辑漏洞的发生
				例如可以通过逻辑漏洞未授权访问页面
				通过Target > Site map > Engagement tools > Discover content来发现敏感页面/admin
				访问发现页面提示只能由DontWannaCry 类型的用户访问
				通过注册功能发现，可以通过DontWannaCry公司的邮箱来注册一个DontWannaCry类型的用户，使用以下格式的超长email格式地址注册
				----------------------------------
				very-long-string@your-email-id.com
				----------------------------------
				very-long-string字符(用户名)尽可能的长
			
		篡改或删除参数
			web应用程序总是认为用户必须填入相应的字段值或参数
			浏览器可能会拦截缺少字段或参数的表单
			但攻击者可能会篡改甚至删除传输中的参数，使得可以访问本无法访问的页面
			查找该类逻辑漏洞，可以尝试依次修改/删除每一个参数，并观察对应的响应是否有差异
			每次只修改/删除一个字段或参数，观察响应
			尝试删除参数名和参数值，服务端通常以不同的方式处理这两种情况
			一个多步骤的功能(如重置密码分为几个步骤来验证)，在一个步骤中篡改参数会对后面的步骤产生影响
			这些存在于GET、POST参数，甚至是Cookie中
			
			删除参数导致的重置任意用户密码
				代码处理过程可能如下
					-------------------------------------------------
					$username = $_POST['username'];
					$current_passwd = $_POSR['current_password'];
					$password = $_POSR['new_password'];

					if (isset($username) && isset($current_passwd)) {
					    // 验证username和其密码
					    if (check($username, $current_passwd)) {
					        // 验证错误直接return
					    }
					}  
					// 修改username的密码
					modify($username, $password);
					-------------------------------------------------
			
			删除参数值导致的重置任意用户密码
		
		破坏验证流程
			许多业务逻辑依赖设定好的工作流程或步骤，web界面会引导用户完成此类流程，每一个步骤之间依赖性可能很强，破坏某一步骤都会导致验证机制失效，攻击者会破坏/跳过某个步骤，利用此类逻辑漏洞绕过验证机制
			此类漏洞一般是没有对每一个步骤作严格的鉴权验证，简单来说，验证第一个登录因子之后就可以跳过验证第二个登录因子了

			跳过验证码步骤
				比如，很多网站登录都采用2FA(two-factor authentication)二因子认证，用户在登录用户名和密码之后，还需要输入发送在用户邮箱的验证码，普通用户肯定会遵循输入验证码的步骤，但是攻击者可能直接跳过此步骤，直接访问敏感页面
			
			步骤之间验证不严格
				在功能的每一个步骤流程中，每一步骤之间的验证机制都不完善，换言之，步骤之间没有特定的鉴权机制，只要有正确的数据包就可以通过，并没有验证此数据包是否是该用户发出的
				所以对每一步骤先后顺序的调整都可能对验证流程造成影响

			跳过设置步骤，使用默认配置
				例如，一些用户登录之后需要设置自身身份，此时是没有管理员身份的选项的，但是有时候可以通过drop设置的数据包，来使用默认身份，如果Web服务端设置的默认身份为管理员，就可以通过跳过身份设置步骤来使用默认管理员身份

		特定业务逻辑漏洞
			一些特殊的业务逻辑容易发生特殊的逻辑漏洞
			折扣商店的折扣功能是经典的攻击点
			举个很简单的例子，对1000$以上的订单，享有10％的折扣
			如果业务逻辑在折扣后无法检查订单是否已更改，则可能容易受到滥用
			在这种情况下，攻击者可以简单地将商品添加到购物车中，直到达到1000$的门槛，然后在下订单，在下订单之前，将不需要的商品删除
			然后，即使他们不再满足折扣的标准，他们也将获得订单的折扣

			重复使用优惠券
				现在有两个优惠券
					* SIGNUP30
					* NEWCUST5
			
			利用优惠折扣差刷金额
				如果一个商场有折扣优惠券+商品可兑换为现金的功能，那么可以利用此类功能实现无限刷金额
		
		加解密算法利用
			用户可控制加密数据的输入，然后又可以以某种方式使得到密文对应的明文时，这种情况称为encryption oracle
			攻击者可以使用一个请求来加密任意数据，使用另一个请求来解密加密的数据得到明文
			通俗的来说，直接有了加解密的工具(黑盒状态)，可以透视任何加密的数据
		
		如何防止业务逻辑漏洞
			简而言之，防止业务逻辑漏洞的关键是
				确保开发人员和测试人员了解应用程序服务的使用范围
				避免对用户行为或应用程序其他部分的行为做不必要的处理
			这包括在继续操作之前确保任何输入的值都是合理的
			确保开发人员和测试人员都能够充分理解这些预期行为以及应用程序在不同情况下应如何处理也很重要
			这可以帮助团队尽早发现逻辑漏洞
			为此，开发团队应尽可能遵循以下最佳实践
				维护所有事务和工作流的清晰的设计文档和数据流，并注意在每个阶段所做的任何假设
				尽可能清晰地编写代码。如果很难理解应该发生什么，那么将很难发现任何逻辑漏洞
				在不可避免的复杂情况下，提供清晰的文档对于确保其他开发人员和测试人员处理的预期行为至关重要
				注意对使用每个组件的其他代码的任何引用
				如果恶意方以异常方式操纵它们，请考虑一下这些依赖关系的任何副作用
