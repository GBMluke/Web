代码审计
	http://www.freebuf.com/sectool/101256.html
	https://www.owasp.org/index.php
	https://www.dwheeler.com/essays/static-analysis-tools.htm
	https://www.dwheeler.com/essays/static-analysis-tools.html
	https://github.com/mre/awesome-static-analysis
	https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis
	https://www.dwheeler.com/secure-programs/3.71/Secure-Programs-HOWTO/index.html

	PHP代码审计
		RIPS开源 
			一款开源的，具有较强漏洞挖掘能力的自动化代码审计工具
			它使用PHP语言编写的，用于静态审计PHP代码的安全性
			代码安全审计RIPS的主要功能特点如下
				* 能够检测XSS、SQL注入、文件泄露、本地/远程文件包含、远程命令执行以及更多种类型的漏洞
				* 有5种级别选项用于显示以及辅助调试扫描结果
				* 标记存在漏洞的代码行
				* 对变量高亮显示
				* 在用户定义函数上悬停光标可以显示函数调用
				* 在函数定义和调用之间灵活跳转
				* 详细列出所有用户定义函数(包括定义和调用)、所有程序入口点(用户输入)和所有扫描过文件(包括include的文件)
				* 以可视化的图表展示源代码文件、包含文件、函数及其调用
				* 仅用几个鼠标点击就可以使用CURL创建针对检测到漏洞的EXP实例
				* 详细列出每个漏洞的描述、举例、PoC、补丁和安全函数
				* 7种不同的语法高亮显示模式
				* 使用自顶向下或者自底向上的方式追溯显示扫描结果
				* 一个支持PHP的本地服务器和浏览器即可满足使用需求
				* 正则搜索功能
			当前有商业版，但开源已经够用了，最新版本的RIPS是0.55
				https://sourceforge.net/projects/rips-scanner/

	Java代码审计
		代码质量
			findbugs
		代码安全
			findsecuritybugs 
		FindSecurityBugs是Java静态分析工具FindBugs的插件，通过一系列的规则发现代码中的Java安全漏洞
		这个工具可以集成在很多IDE中，包括Eclipse或IntelliJ
		目前这个项目已经在安全社区中获得了不少关注度
		该工具的最新版本还增加了专门针对Android端产品的漏洞类型
		因此，它也是一个不错的移动端安全扫描工具
		如果你想更详细的了解它，可以去访问
			http://findbugs.sourceforge.net/downloads.html
			https://www.jianshu.com/p/c43940c4e025
			https://find-sec-bugs.github.io/
			https://wiki.jenkins.io/display/JENKINS/FindBugsPlugin  
	
	其他语言代码审计
		net
			https://security-code-scan.github.io/
		
		C++
			代码质量
				cppcheck
			代码安全
				flawfinder
			https://sourceforge.net/projects/flawfinder/
			http://www.doc88.com/p-669125880049.html
			https://sourceforge.net/p/flawfinder/feature-requests/4/
				xml格式支持  
		
		JS
			代码质量
				eslint
			https://github.com/ajinabraham/NodeJsScan
			https://blog.csdn.net/yalishandalee/article/details/61916454
			https://github.com/nodesecurity/eslint-plugin-security#rules

		Go
			代码质量
				golint
				go tool vet
			代码安全
				gas
			https://github.com/GoASTScanner/gas  
		
		Python
			代码质量
				pylint
			代码安全
				bandit
				py-find-injection
				pyt 
			https://wiki.openstack.org/wiki/Security/Projects/Bandit
			https://github.com/openstack/bandit
			https://github.com/uber/py-find-injection
			https://github.com/bit4woo/python_sec https://github.com/python-security/pyt  

		多种语言的安全代码检查工具
			sonar
				https://docs.sonarqube.org/display/SONAR
				https://www.sonarsource.com/products/codeanalyzers/sonarjava/rules.html#Vulnerability_Detection
				https://github.com/SonarSource/sonarqub  
		
		ruby
			https://github.com/thesp0nge/dawnscanner
			https://github.com/presidentbeef/brakeman  

	商业代码审计工具
		其实网上都说烂了，静态分析的工具RISP，VCG，Fortify SCA等，动态工具有360的sky wolf，鸟哥的taint
		静态分析还有几个
			https://github.com/wufeifei/cobra
		这是一个简单的通过正则查找漏洞的工具 
		https://grepbugs.com/ 
		taint只支持php5.4.*及以前的版本，最新的php是不支持的
	
	代码审计入门
		0x00整体
			学习代码审计的目标是能够独立完成对一个CMS的代码安全监测
			其通用的思路有
				* 通读全文代码，从功能函数代码开始阅读，例如include文件夹下的common_fun.php，或者有类似关键字的文件
				* 看配置文件，带有config关键字的文件，找到mysql.class.php文件的connect()函数，查看在数据库连接时是否出现漏洞
				* 继续跟读首页文件，index.php，了解程序运作时调用了哪些函数和文件 以index.php文件作为标线，一层一层去扩展阅读所包含的文件，了解其功能，之后进入其功能文件夹的首页文件，进行扩展阅读
		0x01漏洞
			01.文件操作漏洞
				能不用文件名参数就不用尽量不要让用户可控
				平行用户的权限管理员的权限操作权限
				禁止传入参数类似于这种..、/、\检查传入的参数，做出限制，停止程序往下执行
				001.文件包含漏洞
					0001.本地文件包含
						一般存在于模块加载，模板加载，cache调用包括函数
							include()/include_once()
							require()/require_once()
						寻找可控变量
						1.php
							------------------------------------------
							<?php
								dirfine("ROOT",dirname(__FILE__).'/');
								$mod = $_GET('mod');
								include(ROOT.$mod.'.php');
							?>
							------------------------------------------
						2.php
							------------------
							<?php phpinfo() ?>
							------------------
					0002.远程文件包含
						前提条件
							allow_url_include = on
						出现频率不如本地包含
					0003.文件包含截断
						%00截断(php版本5.3)
						？截断(问好后面相当于请求到参数，伪截断)
						英文(.)反斜杠(/)截断
				002.文件读取(下载)漏洞
					搜索关键函数
						* file_get_contents()
						* highlight_file()
						* fopen()
						* read file()
						* fread()
						* fgetss()
						* fgets()
						* parse_ini_file()
						* show_source()
						* file()
				003.文件上传漏洞
					搜索关键函数
						move_uploaded_file()接着看调用这个函数的代码是否存在为限制上传格式或者可以绕过
					未过滤或本地过滤
						服务器端未过滤，直接上传PHP格式的文件即可利用
					黑名单扩展名过滤
						限制不够全面
							IIS默认支持解析.asp、.cdx、.asa、.cer等
						扩展名可绕过
							------------------------------------------------------------------------
							<?php
								function getExt($filename)
								{
									return substr($file,strripos($filename,'.')+1);
								}
								$disallowed_types = array("php","asp","aspx");
								$filenameExt = strtolower(getExt($_FILES['file']['name']));
								if(in_array($filenameExt,$disallowed_types))
								{
									die("disallow type");
								}
								else
								{
									$filename = time().".".$filenameExt;
									move_uploaded_file($_FILES['file']['temp'],'upload/'.$filename);
								}
							?>
							------------------------------------------------------------------------
						不被允许的文件格式.php，但是我们可以上传文件名为1.php(注意后面有一个空格)
					文件头content-type验证绕过
						* getimagesize()函数
							验证文件头只要为GIF89a，就会返回真
						* 限制$_FILES["file"]["type"]的值就是人为限制content-type为可控变量
					防范
						使用in_array()或利用三等于===对比扩展名
						保存上传文件是重命名，规则采用时间戳拼接随机数
							md5(time() + rand(1,1000))
				004.文件删除漏洞
					搜索关键函数
						unlink()利用回溯变量的方式
						老版本下的session_destroy()，可以删除文件，现已基本被修复
					Metinfo的任意文件删除漏洞
						--------------------------------------------------------------------------
						<?php
							$action = $_GET['action'];
							$filename = $_GET['filename'];
							if($action = "delete") {
								if(is_array($filenames)) {
									foreach($filenames as $filename) {
										unlink('../../databack'.$filename)；
									}
								}
							}
							else {
								if(fileext($filenames) == "sql") {
									$filenamearray = explode(".sql",$filename);
									unlink('../../databack'.$filename);
									unlink('../../databack/sql/metinfo_'.$filenamearray[0].'zip');
								} 
								elae {
									unlink('../../databack/'.$fileon.'/'.$filename);
								}
							}
						?>
						--------------------------------------------------------------------------
						$action = delete即可删除.sql的文件，如果文件不是sql直接删除提交的文件名
						target.com/recovery.php?&action=delete&filename=../../index.php
			02.代码执行漏洞
				001.代码执行函数
					搜索关键函数
						eval()
						assert()
						preg_replace()
						call_user_func()
						call_user_func_array()
						array_map()
					preg_replace()函数
						mixed preg_replace(mixed $pattern,mixed $replacement,mixed $subject[, int $limit = -1[, int &$count]])
						{当$pattern处存在e修饰符时，$replacement会被当做php代码执行}
					mixed call_user_func(callable $callbank[, mixed $parameter[, mixed$…)
						{第一个参数为回调函数，第二个参数是回调函数的参数}
						----------------------------------
						<?php
							$b = "phpinfo()";
							call_user_func($_GET['a'],$b);
						?>
						----------------------------------
					eval()和assert()
						{当assert()的参数为字符串时 可执行PHP代码}
						eval("phpinfo();"); = False
						eval("phpinfo()"); = True
						assert("phpinfo();"); = True
						assert("phpinfo()"); = False
				002.动态函数运行
					动态函数后门
						---------------------------
						#!php
						<?php
							$_GET['a']($_GET['b']);
						?>
						---------------------------
					命令执行函数
						搜索关键函数
							system()
							exec()
							shell_exec()
							passthru()
							pcntl_exec()
							popen()
							proc_open()
						popen和proc_open()
							-----------------------------------------------------------
							#!php
							<?php 
								popen('whoami>>/Users/bingdaojueai/Desktop/1.txt','r');
							?>
							-----------------------------------------------------------
							所在路径就会出现一个1.txt里面的内容为命令执行后的结果
						反引号命令执行
							------
							echo …
							------
							双引号和单引号的区别
							---------------------
							#!php
							$a = 1
							echo "$a" = output:1
							echo '$a' = output:$a
							---------------------
							{双引号时，可以直接解析变量，造成代码执行漏洞，google绕过}
				003.变量覆盖漏洞
					0001.函数使用不当
						int extract(array &$var_array,int $extract_type = EXTR_OVERWRITE,string $prefix = null)
						void parse_str(string $str,array &$arr)
						bool import_request_variables(string $type,string $prefix)
					0002.$$变量覆盖
						-----------------------------------------------------
						<?php
						$a = 1;
						foreach(array("_COKKIE","POST","GET") as $_request) {
							foreach($$_request as $_key => $value) {
								echo $_key."<br>";
								$$_key = addslashes($value);
							}
						}
						echo $a;
						?>
						-----------------------------------------------------
				004.逻辑漏洞
					需要思考的问题
						程序是否可以重复安装
						修改密码是否存在越权修改其他用户密码
						找回密码验证码是否可以暴力破解
						cookie是否可以预测验证存在绕过
					0001.等于与存在判断绕过
						in_array()
							{比较之前会自动转换类型}
							-------------------------------------------------------------------
							<?php
								if(in_array($_GET['type_id'],array(1,2,3,4))) {
									$sql = "SELECT ... WHERE type_id = '".$_GET['type_id']."'";
								}
							?>
							-------------------------------------------------------------------
						is_numeric()
							{当传入参数为hex时直接通过并返回true并且MYSQL可以直接使用hex编码代替字符串明文可以二次注入并且可能造成XSS漏洞}
						双等于==和三等于===
							双等于会在变量比较时，进行类转换，与in_array()是一样的问题
							三等于是type和value的双重比较，相比之下更加安全
					0002.账户体系中的越权问题
						水平越权
							A用户能够以B用户的身份，进行B用户的全部权限操作
							前提A用户和B用户拥有相同的权限
						垂直越权
							A用户能够以C用户的身份，进行C用户的全部权限操作，前提C用户比A用户拥有更高的权限
						00001.未exit/return/die
							---------------------------------
							#!php
							<?php
								if(file_exists('install.lock)) {
									header("Location:xxx.com");
									//exit();
								}
								echo "test";
							?>
							---------------------------------
							test依旧会被输出，替换成安装流程，PHP依旧会进行
						00002.支付漏洞
							客户端修改单价
							客户端修改总价和购买数量
							服务端未校验严格
							重复发包利用时间差
								---------------------------------
								#!php
									<?php
									if (check_money($price)) {
										//Do something
										//花费几秒
										$money = $money - $price;
									}
								?>
								---------------------------------
							可能导致漏洞函数
								str_replace()
								--------------------------------------------------------------------------
								<?php
									//省略
									$order_sn = str_replace($_GET['subject'],'',$_GET['out_trade_no']);
									$order_sn = trim($order_sn);
									if(!check_money($order_sn,$_GET['total_fee'])) {
										//省略
									}
									function check_money($log_id,$money) {
										$sql = "SELECT order_amount FROM xx WHERE log_id = '".$log_id."'";
										//省略
									}
								?>
								--------------------------------
								#!php
								<?php
									$a = addslashes($_GET['a']);
									$b = addslashes($_GET['b']);
									echo "$a<br>$b<br>";
									$c = str_replace($a,'',$b);
									echo trim($c);
								?>
								--------------------------------
						00003.会话认证漏洞
							cookie验证
								没有使用session验证，将信息直接保存在cookie中
								找到传入sql语句的参数的传递过程，回溯变量到最原始的函数，看它保存在cookie的算法是否可逆
								和md5比起，sha1更安全，解密sha1的网站更少
								限制一个用户只能同时在一个IP上登录
								审计代码时，查看登录处的代码
					0004.二次漏洞
						类型
							不是逻辑问题
							业务逻辑复杂度，与二次漏洞触发率成正比
							购物车/订单引用数据/文章编辑/草稿 = SQL注入/XSS
							------------------------------------------------------------------------------
							<?php
								$conn = mysql_connect("localhost","root","root");
								mysql_select_db("test",$sonn);
								$a = addslashes($_POST['pwd']);
								if(!empty($a) && isset($_POST['sub'])) {
									$sql1 = "UPDATE user SET password = '".$a."' WHERE name = 'sixwhale'";
									$sql2 = "SELECT * FROM user WHERE name = 'sixwhale'";
									if(mysql_query($sql1)) {
										echo "update ok<br>";
									}
									else {
										echo mysql_error();
									}
									if($row = mysql_fetch_assoc(mysql_query($sql2))) {
										echo "select ok<br>";
									}
								}
								else {
									echo "no";
								}
								echo "select * from xx where = '".$row['password']."'<br>";
								echo $a;
							?>
							<html>
								<from action="" method="POST">
									<input type="text" name="pwd">
									<input type="submit" name="sub">
								</from>
							</html>
							------------------------------------------------------------------------------
						技巧
							钻GPC等转义的空子
								不受GPC保护的$_SERVER变量
									PHP5以后，$_SERVER取到的header不再受GPC影响，就算开启特殊字符也不会被转义，存在注入
								编码问题转换
									GBK的宽字节注入
										%df '单引号自动被转义成(%5c)，同时%df与%5c连在一起组合成運字单引号依然在，成功闭合(php与mysql交互过程中发生的编码转换问题)
										mb_convert_encoding()
										--------------------------------------------------------------------
										#!php
										<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/> 
										<?php
											$sql = "WHERE id='".urldecode("-1%df%5c' == ")."'"; 
											print_r(mb_convert_encoding($sql,"UTF-8","GBK"));
										?>
										--------------------------------------------------------------------
							字符串问题
								利用报错，找到敏感信息
									字符串截断
										%00空字符截断
											PHP版本小于5.3
											-----------------------------------
											#!php
											<?php
												include($_GET['file'].'.php');
												//1.php?file=2.txt%00
												//2.txt里面是 <?php phpinfo()?>
											?>
											-----------------------------------
										iconv函数字符编码转换截断
											对PHP版本有要求
											-------------------------------------------------
											#!php
											chr(128)—chr(255)可以截断字符
											<?php 
												$a = '1'.chr(130).'2’; 
												echo $a."<br>";// 1�2
												echo iconv("UTF-8", "GBK", $a);// 1
											?>
									php://输入输出流
										-------------------------------------------------------------------------------------------
										#!php
										<?php
											include($_GET[‘file']);
										?>
										1.php?file=php://filter/convert.base64-encode(内容被base64编码)/resource=example.txt(远程文件)
										-------------------------------------------------------------------------------------------
									php代码解析标签
										<script language="php">…</script>
										<?…?>：php3.0.4版本后可用
										<%…%>：asp标签，需要asp_tags=on，默认是off
									正则表达式
										没有使用^和$限定匹配开始位置
										特殊字符未转义
									报错注入
										----------------------------------------------------------------------------------
										<?php
											¥conn= mysql_connect("localhost","root","root");
											mysql_select_db("test",$conn);
											$sql1 = "SELECT 1 FROM (SELECT count(*),concat(USER(),floor(rand(0)*2)) x FROM
													information_schema.TABLES GROUP BY x) a";
											$sql2 = "SELECT * FROM user WHERE id = 1 and 
													(extractvalue(1,concat(0x5c,(SELECT user()))))";
											$sql3 = "SELECT * FROM user WHERE id = 1 and 
													(updatexml(1.concat(0x5c24,(SELECT user()),0x5e24),1))";
											$sql4 = "SELECT * FROM user WHERE id = 1 and 
													GeometryCollection((SELECT * FROM(SELECT * FROM(SELECT user())a)b))";
											$sql5 = "SELECT * FROM user WHERE id = 1 and 
													polygon((SELECT * FROM(SELECT * FROM(SELECT user())a)b))";
											$sql6 = "SELECT * FROM user WHERE id = 1 and 
													multipoint((SELECT * FROM(SELECT * FROM(SELECT user())a)b))";
											$sql7 = "SELECT * FROM user WHERE id = 1 and 
													multilinestring((SELECT * FROM(SELECT * FROM(SELECT user())a)b))";
											$sql8 = "SELECT * FROM user WHERE id = 1 and 
													multiolygon((SELECT * FROM(SELECT * FROM(SELECT user())a)b))";
											$sql9 = "SELECT * FROM user WHERE id = 1 and 
													linestring((SELECT * FROM(SELECT * FROM(SELECT user())a)b))";
											$sql10 = "SELECT * FROM user WHERE id = 1 and 
													exp(~(SELECT * FROM(SELECT user())a))";
											$res = mysql_query($sql10);
											if(!res){
												echo mysql_error();
											}
										?>
										----------------------------------------------------------------------------------
									windows findfirstfile利用
										若要搜索12345.txt文件，可使用1<<来代替或者12<<，不可以单独使用一个"<"或">"，因为单独一个只是代表了一个字符，两个代表多个字符
